using https://github.com/jeremyevans/roda-sequel-stack as base

= Steps

== secrets

create a .secrets.rb file in the root of the project and add something like this 

   case ENV['RACK_ENV'] ||= 'development'
   when 'test'
     ENV['PAYMENT_API_SESSION_SECRET'] ||= "...".unpack('m')[0]
   when 'production'
     ENV['PAYMENT_API_SESSION_SECRET'] ||= "...".unpack('m')[0]
   else
     ENV['PAYMENT_API_SESSION_SECRET'] ||= "...".unpack('m')[0]
   end
   
   ENV['PUBLIC_KEY'] ||= '...'
   
   ENV['PAYMENT_URL'] ||= '...'

== Install dependencies

Run in the command line

  bundle install

== Database Setup

If you want to run the database with docker

  docker compose up

then to connect 

   docker exec -it pp_postgres psql -U postgres

note: I had a problem connecting the container to the postgres container.
Because of this, the definition for the application is commented for now.

Create the databases 

  CREATE DATABASE payment_api_production;
  CREATE DATABASE payment_api_test;
  CREATE DATABASE payment_api_development;

== Create tables 

to set up the tables in the database, run 

  rake dev_up  # Migrate the development database up
  rake test_up # Migrate the test database up
  rake prod_up # Migrate the production database up

== run tests

  rake test

= dev

to run an irb session 

  rake dev_irb  # IRB shell with models connected to the development database
  rake test_irb # IRB shell with models connected to the test database
  rake prod_irb # IRB shell with models connected to the production database


== Diagrams

=== model diagram

rdoc-image:diagrams/img/model.png

=== database

rdoc-image:diagrams/img/db.png

== Main Libraries Used

roda :: web framework
sequel :: database library
rack-unreloader :: development code reloader

minitest :: testing framework
minitest-hooks :: around/around(:all) hooks for minitest
minitest-global_expectations :: minitest expectation methods for all objects
capybara :: web application testing helpers

tilt :: template library
sassc :: SCSS to CSS compiler
erubi :: ERB template implementation

== Optional Libraries Used

sequel_pg :: optimization for using Sequel with pg
sequel-annotate :: Provides annotations for models
refrigerator :: freezes ruby environment in production and when testing (not
                enabled by default, modify config.ru to enable)
simplecov :: Test line/branch coverage

== Roda Plugins Used

default_headers :: Add security related headers for older browers
content_security_policy :: Add Content-Security-Policy header
route_csrf :: Add CSRF protection
flash :: Support flash messages (available in next request)
assets :: Allow use of SCSS for styling, automatically converting to CSS
render :: Allow use of ERB templates, with HTML escaping by default
public :: Serve files in public directory
hash_branch_view_subdir :: Split routing tree by top-level branch, with a separate
                           view subdirectory per route branch
common_logger :: Log received requests
not_found :: Show nice 404 error page
exception_page :: Show detailed debugging page for internal errors in development
error_handler :: Show appropriate error page for internal errors
sessions :: Use encrypted cookie sessions

== Sequel Plugins Used

auto_validations :: Automatically validate model objects based on database schema
prepared_statements :: Use prepared statements for inserts/updates for model objects
subclasses :: Freeze model classes in production and during testing

== Environment Variables Used

#{APP}_SESSION_SECRET :: cookie session secret, must be >=64 bytes
RACK_ENV :: environment to use (production, development, or test), defaults
            to development.

== Specs

To run the specs for the application after running <tt>rake setup</tt>,
run +rake+.  To run specs for the stack itself (to test if the stack itself
is functioning as expected), run +rake+ before running <tt>rake setup</tt>.
The specs for the stack itself depend on the gems in +Gemfile+, as well
as the +rackup+ and +webrick+ gems (+puma+ will also be used if installed).
